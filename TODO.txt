pour vérifier:
-la pression hydrostatique, calculer à la main et comparer
-le code, comparer avec fem_full_test
-justifier le maillage en changeant la taille et jusqu'a atteindre une différence de déformation négligeable.(se renseigner sur la ductilité du béton, normalement c'est rupture fragile donc supporte très peu les déplacement en cisaillement)
-vérifier que la mémoire est correctement allouée
-nettoyer le code et le commenter



Faire le projet:
V-créer la forme 
V-créer le maillage progressif et fin aux endroits les plus contraints
V-créer la force hydrostatique (->discrete ?)
-faire un solveur efficace (solveur)
-calculer les efforts internes
-calculer les deplacements 
-enlever de la matiere en itérant
-faire un rapport de 2 pages
-préparer la présentation orale
-modifier les données physiques pour "changer" le remplissage du béton, faire des micro trous en changeant la porositté et la masse volumique.

-PLANAR_STRAIN


-On bloque les déplacements dans la direction z donc on est en déformation plane ! ->> On suppose que la terre sur laquelle le barrage se repose l'empêche de se déformer, une  tension y est donc appliquée.

-axisymétrique: modifier assemble, assemble neumann, avec un flag if axisymetrique , change pas le solveur, (opérateur laplacien)


############################ Mise au propre réunion Michel 9/4 #########################################"


pour la pression hydrostatique, il faut:
-Dans pre: modifier le fem.c (3 endroits) et le fem.h (1) et imposer la conditions dans main.c avec comme value1 = -rho*g
-Dans project: modifier le fem.c et fem.h et dans le code assembleNeumann, ajouter la pression hydrostatique dans les type et dans les if, pour faire en sorte que f_x = value*y
-Dans pro: ptt l'ajouter aussi 

UV ce sont les positions, matrice des positions, déplacements

PAS itérer pour enlever de la matière pour l'instant, sinon il faut modifier l'intérieur du code pour lier pre/project/post

On est pas obligé d'imposer les conditions de Neumann = 0 car s'il n'y a pas de condition c'est ce que le code fera. Mais il faut en parler dans le projet donc c'est mieux d'etre explicite

Le meilleur solveur 2D à utiliser pour renuméroter le solveur band est le Reverse Cuthill Mckee Algorithm -> rapide 

pour l'axisymétrie, il faut mettre une condition if (type) = axisymétric alors on rendre dans une partie avec du r, il faut fair eça dans assemble et neumannAssemble



##################### DANS LE RAPPORT FINAL: (selon marbre discord) ###################################

Petite liste non-exhaustive de ce qui peut être mis dans le rapport final:
SURTOUT PAS ce qui est déjà dans la description du projet
Pas les math des éléments finis, on les connait
Présentation des résultats, avec figures, quelle est la déformation, comment est-ce qu'on peut l'interpréter
Choix du solveur si solveur spécial utilisé
Analyse des performances du solveur quand on raffine le maillage (En plt.loglog
Comment le code a été validé. (Exemple en comparant avec une solution analytique conne)
Une analyse de convergence (Faire des maillages de plus en plus petits et montrer que l'erreur décroit comme attendu + montrer l'ordre de cette erreur)
Si vous avez des conditions frontières bizzares, quelques mots sur leur implémentation



de r´ediger une note de synth`ese d’au maximum 2 pages pour votre mission de conseil. Fournir une
estimation de l’ordre de pr´ecision du r´esultat obtenu en expliquant comment vous avez valid´e votre
code num´erique. Produire quelques illustrations pertinentes pour l’analyse de la solution. Expliquer
comment vous avez optimis´e votre programme afin qu’il soit le plus rapide possible. Ne pas recopier
les d´eveloppements th´eoriques du syllabus, ne pas recopier l’´enonc´e du probl`eme, ne pas fournir des
diagrammes incompr´ehensibles, ne pas donner des tableaux de chiffres indigestes. L’orthographe, la